/****************************************************************************
** Form interface generated from reading ui file 'theliform.ui'
**
** Created: Fri Feb 2 16:30:21 2018
**
** WARNING! All changes made in this file will be lost!
****************************************************************************/

#ifndef THELIFORM_H
#define THELIFORM_H

#include <qvariant.h>
#include <qmainwindow.h>

class QVBoxLayout;
class QHBoxLayout;
class QGridLayout;
class QSpacerItem;
class QAction;
class QActionGroup;
class QToolBar;
class QPopupMenu;
class QTabWidget;
class QWidget;
class QGroupBox;
class QPushButton;
class QButtonGroup;
class QRadioButton;
class QListBox;
class QListBoxItem;
class QProgressBar;
class QLineEdit;
class QSpinBox;
class QLabel;
class QCheckBox;
class QFrame;
class QTextEdit;
class QComboBox;

class theliForm : public QMainWindow
{
    Q_OBJECT

public:
    theliForm( QWidget* parent = 0, const char* name = 0, WFlags fl = WType_TopLevel );
    ~theliForm();

    QTabWidget* mainmenu_TabWidget;
    QWidget* PageInitialise;
    QGroupBox* in_instselectGroupBox;
    QPushButton* in_createselfPushButton;
    QButtonGroup* in_instButtonGroup;
    QRadioButton* in_profinstRadioButton;
    QRadioButton* in_comminstRadioButton;
    QRadioButton* in_userinstRadioButton;
    QListBox* in_instrumentListBox;
    QProgressBar* diskspaceProgressBar;
    QLineEdit* tf_instrumentLineEdit;
    QGroupBox* createsaveresumeGroupBox;
    QPushButton* in_loadlogPushButton;
    QLineEdit* in_reductionlogLineEdit;
    QPushButton* in_clearprocstatusPushButton;
    QSpinBox* in_homediskwarnSpinBox;
    QSpinBox* in_datadiskwarnSpinBox;
    QLabel* textLabel1_6_2;
    QLabel* textLabel1_6;
    QLabel* in_nframesTextLabel;
    QSpinBox* in_nframesSpinBox;
    QLabel* in_TextLabel3_2;
    QSpinBox* tf_styleSpinBox;
    QSpinBox* in_numcpuSpinBox;
    QLabel* in_TextLabel3;
    QLabel* textLabel2_3;
    QGroupBox* in_dirsettingGroupBox;
    QLineEdit* in_biasdirLineEdit;
    QLabel* in_maindirTextLabel;
    QLabel* in_darkdirTextLabel;
    QLabel* in_biasdirTextLabel;
    QPushButton* in_restoreallPushButton;
    QPushButton* in_restoredarkPushButton;
    QPushButton* in_restorebiasPushButton;
    QLineEdit* in_darkdirLineEdit;
    QLineEdit* in_maindirLineEdit;
    QLabel* in_flatdirTextLabel_2_2;
    QLabel* in_flatdirTextLabel_2;
    QLabel* in_sciencedirTextLabel;
    QCheckBox* in_processskyCheckBox;
    QPushButton* in_clearPushButton;
    QLineEdit* in_sciencedirLineEdit;
    QLineEdit* in_skydirLineEdit;
    QPushButton* in_restoreskyPushButton;
    QPushButton* in_restoresciencePushButton;
    QPushButton* in_restorestandardPushButton;
    QLineEdit* in_standarddirLineEdit;
    QLabel* in_flatdirTextLabel;
    QLineEdit* in_flatdirLineEdit;
    QPushButton* in_restoreflatPushButton;
    QLabel* in_flatdirTextLabel_3;
    QLineEdit* in_flatoffdirLineEdit;
    QPushButton* in_restoreflatoffPushButton;
    QWidget* PageCalibration;
    QGroupBox* groupBox18;
    QFrame* line3;
    QLabel* pre_TextLabel12_2;
    QLabel* pre_TextLabel12_2_2;
    QLineEdit* pre_linkchipsLineEdit;
    QLineEdit* pre_scratchdirLineEdit;
    QCheckBox* pre_splitCheckBox;
    QCheckBox* pre_sortdataCheckBox;
    QCheckBox* pre_createlinksCheckBox;
    QCheckBox* pre_splitMIRCheckBox;
    QLabel* pre_TextLabel1;
    QLabel* pre_TextLabel13;
    QGroupBox* pre_commandGroupBox;
    QTextEdit* pre_commandTextEdit;
    QPushButton* pre_killPushButton;
    QPushButton* pre_configurePushButton;
    QPushButton* pre_clearscriptsPushButton;
    QPushButton* pre_startPushButton;
    QGroupBox* pre_messagesGroupBox;
    QTextEdit* pre_messagesTextEdit;
    QWidget* TabPage;
    QGroupBox* cal_commandGroupBox;
    QTextEdit* cal_commandTextEdit;
    QPushButton* cal_configurePushButton;
    QPushButton* cal_clearscriptsPushButton;
    QPushButton* cal_killPushButton;
    QPushButton* cal_startPushButton;
    QPushButton* cal_resetfieldsPushButton;
    QGroupBox* cal_messagesGroupBox;
    QTextEdit* cal_messagesTextEdit;
    QGroupBox* cal_GroupBox;
    QCheckBox* cal_darkinsteadbiasCheckBox;
    QCheckBox* cal_procscienceCheckBox;
    QLineEdit* cal_scienceminLineEdit;
    QLabel* cal_TextLabel3;
    QLineEdit* cal_sciencemaxLineEdit;
    QCheckBox* cal_procbiasCheckBox;
    QLineEdit* cal_biasminLineEdit;
    QPushButton* cal_calibredoPushButton;
    QLineEdit* cal_darkminLineEdit;
    QLabel* cal_TextLabel2;
    QLineEdit* cal_flatmaxLineEdit;
    QCheckBox* cal_procdarkCheckBox;
    QLineEdit* cal_flatminLineEdit;
    QCheckBox* cal_procflatCheckBox;
    QLineEdit* cal_biasmaxLineEdit;
    QLineEdit* cal_darkmaxLineEdit;
    QFrame* frame4;
    QCheckBox* cal_nobiasCheckBox;
    QCheckBox* cal_noflatCheckBox;
    QCheckBox* cal_nonlinCheckBox;
    QWidget* PagePrereducion;
    QGroupBox* sf_commandGroupBox;
    QTextEdit* sf_commandTextEdit;
    QPushButton* sf_startPushButton;
    QPushButton* sf_clearscriptsPushButton;
    QPushButton* sf_resetsfieldsPushButton;
    QPushButton* sf_killPushButton;
    QGroupBox* sf_messagesGroupBox;
    QTextEdit* sf_messagesTextEdit;
    QButtonGroup* sf_ButtonGroup;
    QPushButton* sf_backgroundconfigurePushButton;
    QPushButton* sf_backgroundredoPushButton;
    QPushButton* sf_collapseredoPushButton;
    QPushButton* sf_collconfigurePushButton;
    QCheckBox* sf_collapseCheckBox;
    QPushButton* sf_chopnodredoPushButton;
    QLabel* sf_patternTextLabel;
    QComboBox* sf_chopnodpatternComboBox;
    QCheckBox* sf_chopnodinvertCheckBox;
    QCheckBox* sf_spreadsequenceCheckBox;
    QCheckBox* sf_mergesequenceCheckBox;
    QLabel* sf_spread1TextLabel;
    QLabel* sf_spread2TextLabel;
    QLineEdit* sf_spread_numbergroupsLineEdit;
    QLineEdit* sf_spread_lengthsequenceLineEdit;
    QCheckBox* sf_chopnodCheckBox;
    QCheckBox* sf_backgroundCheckBox;
    QWidget* TabPage_2;
    QPushButton* w_clearscriptsPushButton;
    QPushButton* w_resetfieldsPushButton;
    QPushButton* w_startPushButton;
    QPushButton* w_killPushButton;
    QGroupBox* w_messagesGroupBox;
    QTextEdit* w_messagesTextEdit;
    QGroupBox* w_commandGroupBox;
    QTextEdit* w_commandTextEdit;
    QButtonGroup* w_weightButtonGroup;
    QPushButton* w_configure3PushButton;
    QCheckBox* w_createbinmosCheckBox;
    QCheckBox* w_distsetCheckBox;
    QCheckBox* w_createweightsCheckBox;
    QPushButton* w_debloomredoPushButton;
    QPushButton* w_configure2PushButton;
    QPushButton* w_configure1PushButton;
    QLabel* w_minoverlapTextLabel;
    QLineEdit* w_minoverlapLineEdit;
    QCheckBox* w_createglobwCheckBox;
    QCheckBox* w_debloomCheckBox;
    QLabel* w_bloomthreshTextLabel;
    QLineEdit* w_bloomthreshLineEdit;
    QWidget* PageAstromPhotom;
    QButtonGroup* ap_astphotButtonGroup;
    QPushButton* ap_astrommethodconfigurePushButton;
    QPushButton* ap_sexcatconfigurePushButton;
    QPushButton* ap_directphotredoPushButton;
    QPushButton* ap_absphotom_indirect_configurePushButton;
    QPushButton* ap_absphotom_direct_configurePushButton;
    QCheckBox* ap_absphotom_indirect_CheckBox;
    QFrame* frame3;
    QLabel* ap_maglimTextLabel;
    QLabel* ap_radiusTextLabel;
    QLabel* ap_refraTextLabel;
    QLineEdit* ap_refdecLineEdit;
    QLabel* ap_dtdminTextLabel;
    QLineEdit* ap_refimagedetectthreshLineEdit;
    QLineEdit* ap_refimagedetectminareaLineEdit;
    QLabel* ap_refdecTextLabel;
    QPushButton* ap_selectimagePushButton;
    QLineEdit* ap_refimageLineEdit;
    QPushButton* ap_getastrefcatalogPushButton;
    QLabel* textLabel1_7;
    QComboBox* ap_arcserverComboBox;
    QLineEdit* ap_maglimLineEdit;
    QLineEdit* ap_refraLineEdit;
    QLineEdit* ap_resolveLineEdit;
    QLabel* ap_resolveTextLabel;
    QPushButton* ap_resolvePushButton;
    QLineEdit* ap_radiusLineEdit;
    QComboBox* ap_arccatComboBox;
    QCheckBox* ap_createsourcecatCheckBox;
    QPushButton* ap_updateheaderPushButton;
    QPushButton* ap_restoreheaderPushButton;
    QComboBox* ap_astrommethodComboBox;
    QCheckBox* ap_astrometryCheckBox;
    QCheckBox* ap_absphotom_direct_CheckBox;
    QPushButton* ap_resetfieldsPushButton;
    QPushButton* ap_killPushButton;
    QPushButton* ap_startPushButton;
    QPushButton* ap_clearscriptsPushButton;
    QGroupBox* ap_messagesGroupBox;
    QTextEdit* ap_messagesTextEdit;
    QGroupBox* ap_commandGroupBox;
    QTextEdit* ap_commandTextEdit;
    QWidget* PageCoadd;
    QPushButton* cc_killPushButton;
    QPushButton* cc_clearscriptsPushButton;
    QPushButton* cc_startPushButton;
    QGroupBox* cc_messagesGroupBox;
    QTextEdit* cc_messagesTextEdit;
    QGroupBox* cc_commandGroupBox;
    QTextEdit* cc_commandTextEdit;
    QButtonGroup* cc_coaddButtonGroup;
    QPushButton* cc_skysubconfigurePushButton;
    QPushButton* cc_coaddconfigurePushButton;
    QLineEdit* cc_resolvedirLineEdit;
    QCheckBox* cc_resolvelinksCheckBox;
    QLabel* cc_textLabel2_2;
    QCheckBox* cc_createskysubCheckBox;
    QCheckBox* cc_coaddCheckBox;
    QMenuBar *theliMenuBar;
    QPopupMenu *Edit;
    QPopupMenu *Settings;
    QPopupMenu *popupMenu_7;
    QPopupMenu *popupMenu_13;
    QPopupMenu *popupMenu_16;
    QPopupMenu *View;
    QPopupMenu *Status;
    QPopupMenu *Miscellaneous;
    QPopupMenu *Delete;
    QPopupMenu *Help;
    QAction* settingsGUIfontAction;
    QAction* viewCommandhistoryAction;
    QAction* helpTechpaperAction;
    QAction* helpVersionAction;
    QAction* editScriptsAction;
    QActionGroup* ActionGroupEditors;
    QAction* nano;
    QAction* emacs;
    QAction* xemacs;
    QAction* nedit;
    QAction* vi;
    QActionGroup* ActionGroupImageViewers;
    QAction* skycat;
    QAction* ds9;
    QActionGroup* ActionGroupPDFViewers;
    QAction* pdfacroread;
    QAction* pdfgvv;
    QAction* pdfxpdf;
    QAction* viewDatadirFITSAction;
    QAction* viewProcessinglogsPreparation_logAction;
    QAction* viewProcessinglogsCalibration_logAction;
    QAction* viewProcessinglogsBackground_logAction;
    QAction* viewProcessinglogsWeighting_logAction;
    QAction* viewProcessinglogsAstromPhotom_logAction;
    QAction* viewProcessinglogsCoaddition_logAction;
    QAction* deleteSPLIT_IMAGESAction;
    QAction* deleteMASK_IMAGESAction;
    QAction* deleteOFC_IMAGESAction;
    QAction* deleteOFCB_IMAGESAction;
    QAction* deleteOFCH_IMAGESAction;
    QAction* deleteundebloomedAction;
    QAction* deletebeforedirectphotAction;
    QAction* deleteresampledAction;
    QAction* helpWhats_thisAction;
    QAction* deleteFlush_tmp_dirAction;
    QAction* statusCPSDebiasingAction;
    QAction* statusCPSBackgroundAction;
    QAction* statusCPSChopnodAction;
    QAction* statusCPSCollapseAction;
    QAction* statusCPSDebloomingAction;
    QAction* statusCPSDirectphotAction;
    QAction* miscellaneousMake_colour_picture_Action;
    QAction* editProfessional_instrumentsAction;
    QAction* miscellaneousCombineImagesAction;
    QAction* miscellaneousImage_statisticsAction;
    QAction* miscellaneousImalyzerAction;
    QAction* miscellaneousGetZP_Action;
    QAction* miscellaneousAnimateAction;
    QAction* miscellaneousProgress_MonitorAction;
    QAction* editCommercial_instrumentsAction;
    QAction* editUser_defined_instrumentsAction;

public slots:
    virtual void versioncheck( int showversionwarning );
    virtual void changestatus_set_imextension();
    virtual void open_pipelinepaper();
    virtual void changestatus_obtain_imextension();
    virtual void flush_tempdir();
    virtual void flush_tempdir_updatespace();
    virtual void delete_data_helper( QLineEdit * datadir, QString subdir, QString extension );
    virtual void delete_MASK_IMAGES();
    virtual void delete_SPLIT_IMAGES();
    virtual void delete_OFC_IMAGES();
    virtual void delete_OFCB_IMAGES();
    virtual void delete_OFCH_IMAGES();
    virtual void delete_undebloomed();
    virtual void delete_beforedirectphot();
    virtual void delete_sub();
    virtual void delete_resampled();
    virtual void style_pushbuttonclicked();
    virtual void font_pushbuttonclicked();
    virtual void show_software_version();
    virtual void cleardirs_initialisepushbutton();
    virtual void viewimageOpen();
    virtual void get_lastchar( QString & string );
    virtual void call_parameters_helper();
    virtual void call_parameters();
    virtual void call_parameters_pre();
    virtual void call_parameters_cal();
    virtual void call_parameters_sf1();
    virtual void call_parameters_sf2();
    virtual void call_parameters_w1();
    virtual void call_parameters_w3();
    virtual void call_parameters_w2();
    virtual void call_parameters_absphotom_indirect();
    virtual void call_parameters_absphotom_direct();
    virtual void call_parameters_sexcat();
    virtual void call_parameters_astrom();
    virtual void call_parameters_cc1();
    virtual void call_cni();
    virtual void call_color();
    virtual void call_animate();
    virtual void call_zp();
    virtual void call_combineimages();
    virtual void call_imagestatistics();
    virtual void call_imalyzer();
    virtual void call_select_astroref_image();
    virtual void call_commandhistory();
    virtual void edit_scripts();
    virtual void edit_userinstconfigs();
    virtual void edit_profinstconfigs();
    virtual void edit_comminstconfigs();
    virtual void show_prelog();
    virtual void show_callog();
    virtual void show_sflog();
    virtual void show_wlog();
    virtual void show_aplog();
    virtual void show_cclog();
    virtual void get_fitsext_fromcheckboxes( QString keyword );
    virtual void is_imextension_empty( int & result );
    virtual void get_fitsext_forchopnod( int * array, QString & result );
    virtual void get_fitsext_forcollmerge( int * array, QString & result );
    virtual void get_fitsext_fordebloom( int * array, QString & result );
    virtual void get_fitsext_forweights( int * array, QString & result );
    virtual void get_fitsext_forastromcoadd( int * array, QString & result );
    virtual void which_instlist();
    virtual void check_for_instrument_duplicates();
    virtual void highlight_instrumentname( QString instrumentname );
    virtual void refresh_instlist();
    virtual void repaint_defaultpaths_helper( QString dir, QString dir2, QLineEdit * myLineEdit );
    virtual void repaint_defaultabspaths_helper( QString dir, QString dir2, QLineEdit * myLineEdit );
    virtual void repaint_defaultpaths();
    virtual void get_numcpu( QString paramset1inipath );
    virtual void update_current_commandlist();
    virtual void update_tabchanged_commandlists();
    virtual void repaint_parameter_fields_helper( QCheckBox * myCheckBox, QLineEdit * myLineEdit );
    virtual void show_scriptlog( QTextEdit * text_edit, QString errormessage );
    virtual void updateError();
    virtual void updateText();
    virtual void create_thelimessage( QString command, QString & reply );
    virtual void updateExit();
    virtual void write_superscriptbody( QString fullpath, QString scripts );
    virtual void update_presinst();
    virtual void get_numchips();
    virtual void get_cameratype();
    virtual void modify_npara();
    virtual void modify_paramset2();
    virtual void modify_paramset3();
    virtual void modify_paramsini();
    virtual void restore_BIAS();
    virtual void restore_DARK();
    virtual void restore_FLAT();
    virtual void restore_FLATOFF();
    virtual void restore_SCIENCE();
    virtual void restore_SKY();
    virtual void restore_STANDARD();
    virtual void restore_ALL();
    virtual void restore_subdirs( QString datasubdir );
    virtual void paint_checkboxes_helper( int key, QCheckBox * myCheckBox );
    virtual void paint_checkboxes();
    virtual void update_lastlog();
    virtual void get_memory();
    virtual void get_diskspace();
    virtual void check_instname_consistency();
    virtual void get_nframes();
    virtual void call_skysubmethod();
    virtual void redo_calib();
    virtual void redo_background();
    virtual void redo_chopnod();
    virtual void redo_collapse();
    virtual void redo_debloom();
    virtual void redo_directphot();
    virtual void redo_helper( QPushButton * pushbutton, QAction * action, QCheckBox * checkbox, QString result, int flag );
    virtual void update_zeroheader();
    virtual void restore_header();
    virtual void write_zerohead_superscriptbody( QString superscript, QString command, QString type );
    virtual void update_zeroheaderText();
    virtual void update_restoreheaderText();
    virtual void check_filepresence( QTextEdit * textedit, QString datadir, QString extension, int & flag, int & flag_ini );
    virtual void call_monitor();
    virtual void update_mainwindowtitle();
    virtual void get_full_instpath(QString &);
    virtual void get_full_aheadpath(QString &);
    virtual void resolve_target();
    virtual void resolve_target_readstdout();
    virtual void resolve_target_exit();
    virtual void enable_server();
    virtual void getfilterlist(QString &);
    virtual void check_filenamelength(QString, QString, int &);
    virtual void make_ascii_conform();
    virtual void make_ascii_conform_helper(QString dir);
    virtual void get_astref_catalog_button();
    virtual void get_astref_catalog_normal(QString science, QString type);
    virtual void check_nonlinearity();
    virtual void check_coordinate_format();
    virtual void clean_refcoordsLineEdit();
    virtual void write_logfile();
    virtual void read_logfile();
    virtual void clear_processingstatus_in_logfile();
    virtual void obtain_imextension();
    virtual void set_imextension(int val, int position );
    virtual void update_imextension();
    virtual void clearscripts_pre_pushbutton();
    virtual void resetfields_pre_pushbutton();
    virtual void resetfields_cal_pushbutton();
    virtual void clearscripts_cal_pushbutton();
    virtual void resetfields_sf_pushbutton();
    virtual void clearscripts_sf_pushbutton();
    virtual void clearscripts_w_pushbutton();
    virtual void resetfields_w_pushbutton();
    virtual void clearscripts_ap_pushbutton();
    virtual void resetfields_ap_pushbutton();
    virtual void clearscripts_cc_pushbutton();
    virtual void resetfields_cc_pushbutton();
    virtual void update_instrument_inlogfile();
    virtual void load_reductionlog();
    virtual void apply_logfile();
    virtual void update_logfile();
    virtual void read_lastlog();
    virtual void update_ap_variousfields();
    virtual void pre_splitdirs( QLineEdit * defaultdir );
    virtual void pre_createlinks( QLineEdit * defaultdir );
    virtual void toggle_darkinsteadbiascheckbox();
    virtual void update_biascheckboxcolor();
    virtual void update_pre_commandlist();
    virtual void update_cal_commandlist();
    virtual void update_sf_commandlist();
    virtual void update_w_commandlist();
    virtual void update_ap_commandlist();
    virtual void update_cc_commandlist();
    virtual void repaint_parameter_fields_pre();
    virtual void repaint_parameter_fields_sf();
    virtual void repaint_parameter_fields_w();
    virtual void repaint_parameter_fields_ap();
    virtual void exec_pre();
    virtual void exec_cal();
    virtual void exec_sf();
    virtual void exec_w();
    virtual void exec_ap();
    virtual void exec_cc();
    virtual void kill_pre();
    virtual void kill_cal();
    virtual void kill_sf();
    virtual void kill_w();
    virtual void kill_ap();
    virtual void kill_cc();
    virtual void validate_refcoords();
    virtual void check_splittingstatus(QString, int &);

protected:
    QGridLayout* theliFormLayout;
    QGridLayout* PageInitialiseLayout;
    QSpacerItem* spacer31_2;
    QGridLayout* in_instselectGroupBoxLayout;
    QGridLayout* in_instButtonGroupLayout;
    QHBoxLayout* layout24;
    QSpacerItem* spacer182_2;
    QVBoxLayout* layout21;
    QGridLayout* createsaveresumeGroupBoxLayout;
    QSpacerItem* spacer37_3_2;
    QGridLayout* in_dirsettingGroupBoxLayout;
    QGridLayout* PageCalibrationLayout;
    QGridLayout* layout23;
    QGridLayout* pre_commandGroupBoxLayout;
    QVBoxLayout* layout22;
    QSpacerItem* spacer37_3;
    QGridLayout* layout21_2;
    QSpacerItem* spacer42;
    QSpacerItem* spacer35_4;
    QGridLayout* pre_messagesGroupBoxLayout;
    QGridLayout* TabPageLayout;
    QGridLayout* layout46;
    QGridLayout* cal_commandGroupBoxLayout;
    QVBoxLayout* layout45;
    QSpacerItem* spacer38_2;
    QGridLayout* layout27;
    QSpacerItem* spacer34_2;
    QSpacerItem* spacer41;
    QGridLayout* cal_messagesGroupBoxLayout;
    QGridLayout* PagePrereducionLayout;
    QGridLayout* sf_commandGroupBoxLayout;
    QVBoxLayout* layout41;
    QSpacerItem* spacer42_2;
    QGridLayout* layout21_3;
    QSpacerItem* spacer39_2;
    QSpacerItem* spacer40;
    QGridLayout* sf_messagesGroupBoxLayout;
    QGridLayout* TabPageLayout_2;
    QGridLayout* layout36;
    QVBoxLayout* layout35;
    QSpacerItem* spacer43;
    QGridLayout* layout29;
    QSpacerItem* spacer40_2;
    QSpacerItem* spacer39;
    QGridLayout* w_messagesGroupBoxLayout;
    QGridLayout* w_commandGroupBoxLayout;
    QGridLayout* PageAstromPhotomLayout;
    QGridLayout* layout38;
    QVBoxLayout* layout37;
    QSpacerItem* spacer44;
    QGridLayout* layout30;
    QSpacerItem* spacer41_2;
    QSpacerItem* spacer38;
    QGridLayout* ap_messagesGroupBoxLayout;
    QGridLayout* ap_commandGroupBoxLayout;
    QGridLayout* PageCoaddLayout;
    QGridLayout* layout40;
    QVBoxLayout* layout39;
    QSpacerItem* spacer45;
    QGridLayout* layout31;
    QSpacerItem* spacer42_3;
    QSpacerItem* spacer37;
    QGridLayout* cc_messagesGroupBoxLayout;
    QGridLayout* cc_commandGroupBoxLayout;

protected slots:
    virtual void languageChange();

private:
    void destroy();
    void init();

};

#endif // THELIFORM_H
