#!/bin/bash -xv

# $1: main directory
# $2: science directory
# $3: extension
# $4: chips to be processed

SCRIPTDIR=`pwd`

INSTDIR=instruments_professional
if [ ! -f ${INSTDIR}/${INSTRUMENT}.ini ]; then
    INSTDIR=instruments_commercial
fi
if [ ! -f ${INSTDIR}/${INSTRUMENT}.ini ]; then
    INSTDIR=~/.theli/instruments_user/
fi
. ${INSTDIR}/${INSTRUMENT:?}.ini

for CHIP in $4
do
  RESULTDIR[${CHIP}]="$1/$2"
done


. bash.include

if [ "${V_COLLMASKACTION}" != "0" ]; then
    if [ ! -d $1/$2/MASK_IMAGES ]; then
	mkdir $1/$2/MASK_IMAGES
    fi
fi

if [ ! -d $1/$2/$3_IMAGES ]; then
    mkdir $1/$2/$3_IMAGES
fi

# check if an area should be masked
maskregion=""
if [ ${V_COLLXMIN}_A != "_A" ] && [ ${V_COLLXMAX}_A != "_A" ] && \
   [ ${V_COLLYMIN}_A != "_A" ] && [ ${V_COLLYMAX}_A != "_A" ]; then
    maskregion="-x ${V_COLLXMIN} ${V_COLLXMAX} ${V_COLLYMIN} ${V_COLLYMAX}"
fi

for CHIP in $4
do
  ls -1 /$1/$2/*_${CHIP}$3.fits > ${TEMPDIR}/collapse_${CHIP}_$$

  NUMTHREAD=`${SCRIPTDIR}/get_nthreads.sh ${NCHIPS} ${NPARA} ${CHIP}`

  FILE=`${P_GAWK} '(NR==1) {print $0}' ${TEMPDIR}/collapse_${CHIP}_$$`

  if [ -L ${FILE} ]; then
      LINK=`${P_READLINK} ${FILE}`
      RESULTDIR[${CHIP}]=`dirname ${LINK}`
      mkdir ${RESULTDIR[${CHIP}]}/MASK_IMAGES
  else
      RESULTDIR[${CHIP}]="$1/$2"
  fi
  
  cat ${TEMPDIR}/collapse_${CHIP}_$$ |\
      {
      while read file
      do
	  BASE=`basename ${file} .fits`
	  BASE2=`basename ${file} $3.fits`
	  
	  if [ "${V_COLLAUTOTHRESHOLD}" = "1" ]; then
              # estimate the amplitude of the reset anomaly
	      amp=`${P_FITSCOLLAPSE} -i ${file} -c ${V_COLLDIRECTION} -k 0.5 -${maskregion} -r`
	      
              # estimate the rms in the image
	      rms=`${P_IMSTATS} -d 6 ${file} | ${P_GAWK} '($1!~/#/) {print $7}'`
	      
              # the sextractor detection threshold (scaled with a factor of 1.2 for safety)
	      # if it is smaller than the user-provided threshold, use the user threshold
	      V_COLLDETECTTHRESH=`echo ${amp} ${rms} ${V_COLLDETECTTHRESH} |\
              ${P_GAWK} '{res=1.2 * $1 / $2; if (res>$3) print res; else print $3}'`
	  fi

	  # check if there is a region file
	  get_region
	  backstring=""
	  weightstring=""
	  if [ -f ${regionfile} ] && [ "${regionfile}_A" != "_A" ]; then
	      # estimate the background, ignoring blanked pixels
	      background=`${P_FITSSTAT} -i ${file} -m median -q`
	      backstring="-BACK_TYPE MANUAL -BACK_VALUE ${background}"
	      weightstring="-WEIGHT_TYPE MAP_WEIGHT -WEIGHT_IMAGE /$1/WEIGHTS/globalweight_dummy_${CHIP}.fits"

	      # check if the dummy weight exists
	      if [ ! -f /$1/WEIGHTS/globalweight_dummy_${CHIP}.fits ]; then
		  mkdir -p /$1/WEIGHTS/
		  ${P_IC} -p -32 -c ${SIZEX[${CHIP}]} ${SIZEY[${CHIP}]} '1' > ${TEMPDIR}/dummy_${CHIP}.fits
		  ${P_FITSPOLYGON} -i ${TEMPDIR}/dummy_${CHIP}.fits -p ${regionfile} -o /$1/WEIGHTS/globalweight_dummy_${CHIP}.fits
		  rm ${TEMPDIR}/dummy_${CHIP}.fits
	      fi
	  fi

          # fitscollapse with object masks
	  if [ "${V_COLLDETECTMINAREA}_A" != "_A" ] && [ "${V_COLLDETECTTHRESH}_A" != "_A" ]; then
	      ${P_SEX} ${file} -c ${DATACONF}/image-objects.sex \
		  -CHECKIMAGE_NAME ${RESULTDIR[${CHIP}]}/${BASE}".mask.fits" \
		  -DETECT_MINAREA ${V_COLLDETECTMINAREA} \
		  -DETECT_THRESH ${V_COLLDETECTTHRESH} \
		  -CHECKIMAGE_TYPE OBJECTS \
		  -NTHREADS ${NUMTHREAD} \
		  ${backstring} ${weightstring}

	      # V_COLLMASKACTION = 0: write no mask image
	      # V_COLLMASKACTION = 1: write masked input image
	      # V_COLLMASKACTION = 2: write masked target image
	      maskstring=""
	      if [ "${V_COLLMASKACTION}" = "0" ]; then
		  maskstring=""
	      fi
	      if [ "${V_COLLMASKACTION}" = "1" ]; then
	          # this is the masked input image (will overwrite sextractor mask inline)!
		  maskstring="-q ${RESULTDIR[${CHIP}]}/${BASE}.mask.fits"
	      fi
	      if [ "${V_COLLMASKACTION}" = "2" ] || [ "${V_COLLMASKACTION}" = "3" ]; then
		  if [ -f $1/$2/OFC_IMAGES/${BASE2}"OFC.fits" ]; then
		      maskstring="-p $1/$2/OFC_IMAGES/${BASE2}OFC.fits ${RESULTDIR[${CHIP}]}/${BASE2}OFC.mask.fits"
		  fi
		  if [ -f $1/$2/${BASE2}"OFC.fits" ]; then
		      maskstring="-p $1/$2/${BASE2}OFC.fits ${RESULTDIR[${CHIP}]}/${BASE2}OFC.mask.fits"
		  fi
	      fi

              # merge global and individual region files, if they exist
	      get_region

	      ${P_FITSCOLLAPSE} \
		  -i ${file} -s \
		  -o ${RESULTDIR[${CHIP}]}/${BASE}"C.fits" \
		  -m $1/$2/${BASE}".mask.fits" \
		  ${maskstring} \
		  ${maskregion} \
		  ${region} \
		  -c ${V_COLLDIRECTION} -k ${V_COLLREJECTTHRESH}

	  else
              # fitscollapse without object masks
	      V_COLLMASKACTION=0

              # merge global and individual region files, if they exist
	      get_region

	      ${P_FITSCOLLAPSE} \
		  -i ${file} -s \
		  -o ${RESULTDIR[${CHIP}]}/${BASE}"C.fits" \
		  -c ${V_COLLDIRECTION} -k ${V_COLLREJECTTHRESH} \
		  ${maskregion} \
		  ${region}
	  fi

	  # cleanup
	  mv ${file} /$1/$2/$3_IMAGES
	  if [ "${RESULTDIR[${CHIP}]}" != "$1/$2" ]; then
	      ln -s ${RESULTDIR[${CHIP}]}/${BASE}"C.fits" \
		  $1/$2/${BASE}"C.fits"
	  fi

	  # if the object mask should be deleted
	  if [ "${V_COLLMASKACTION}" = "0" ]; then
	      test -e ${RESULTDIR[${CHIP}]}/${BASE}".mask.fits" && \
		   rm ${RESULTDIR[${CHIP}]}/${BASE}".mask.fits"
	      test -e $1/$2/${BASE}".mask.fits" && \
		   rm $1/$2/${BASE}".mask.fits"
	      continue
	  fi

	  # if the input image should be masked
	  if [ "${V_COLLMASKACTION}" = "1" ]; then
	      if [ "${RESULTDIR[${CHIP}]}" != "$1/$2" ]; then
		  ln -s ${RESULTDIR[${CHIP}]}/${BASE}".mask.fits" \
		      $1/$2/MASK_IMAGES/${BASE}".mask.fits"
	      else
		  mv $1/$2/${BASE}".mask.fits" $1/$2/MASK_IMAGES/
	      fi
	      continue
	  fi

	  # if the OFC image should be masked, for 2-pass near-IR sky subtraction
	  if [ "${V_COLLMASKACTION}" = "2" ] || [ "${V_COLLMASKACTION}" = "3" ]; then
	      if [ "${RESULTDIR[${CHIP}]}" != "$1/$2" ]; then
		  ln -s ${RESULTDIR[${CHIP}]}/${BASE2}"OFC.mask.fits" \
		      $1/$2/MASK_IMAGES/${BASE2}"OFC.mask.fits"
	      else
		  mv $1/$2/${BASE2}"OFC.mask.fits" $1/$2/MASK_IMAGES/
	      fi
  	      # delete unwanted stuff
	      if [ "$3" != "OFC" ]; then
		  rm  $1/$2/${BASE}".mask.fits"
		  if [ "${RESULTDIR[${CHIP}]}" != "$1/$2" ]; then
		      rm ${RESULTDIR[${CHIP}]}/${BASE}"mask.fits"
		  fi
	      fi
	  fi

	  # if the 2-pass sky subtraction should be performed as well: restore OFC data
	  if [ "${V_COLLMASKACTION}" = "3" ]; then
	      rm $1/$2/${BASE}"C.fits"
	      mv $1/$2/OFC_IMAGES/${BASE2}OFC.fits /$1/$2/
	  fi
      done
  }
done
