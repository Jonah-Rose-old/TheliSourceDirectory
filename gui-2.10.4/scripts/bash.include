function get_wcs {

  local k

  k=1
  cd11=""
  cd12=""
  cd21=""
  cd22=""
  cpx1=""
  cpx2=""

  while [ "${k}" -le "${NCHIPS}" ]
  do
    if [ "${NCHIPS}" = "1" ]; then
       ext=0
    else
       ext=${k}
    fi

    # test if the CD matrix is present
    testcd=`${P_DFITS} -x ${ext} ${FILE} | ${P_FITSORT} CD1_1 | ${P_GAWK} '(NR==2) {print $2}'`
    testcdelt=`${P_DFITS} -x ${ext} ${FILE} | ${P_FITSORT} CDELT1 | ${P_GAWK} '(NR==2) {print $2}'`
    testcdelt2=`echo ${testcdelt} | ${P_GAWK} '{if ($1>=1) print "bad"; else print "good"}'`
    if [ "${testcd}"_A != "_A" ] && [ "${testcd}" != "KEY_N/A" ]; then
        cdmatrix=`${P_DFITS} -x ${ext} ${FILE} | \
	          ${P_FITSORT} CD1_1 CD1_2 CD2_1 CD2_2 | \
                  ${P_GAWK} '($1!="FILE") {print $2, $3, $4, $5}'`
    else
	if [ "${testcdelt}"_A != "_A" ] && [ "${testcdelt}" != "KEY_N/A" ] && [ "${testcdelt2}" = "good" ] ; then
           cdmatrix=`${P_DFITS} -x ${ext} ${FILE} | \
                  ${P_FITSORT} CDELT1 CDELT2 | \
		  ${P_GAWK} '($1!="FILE") {print $2, "0.0", "0.0", $3}'`
    	else
           cdmatrix="${PIXSCX} 0.0 0.0 ${PIXSCY}"
        fi
    fi

    # test if the reference pixel is present
    testcrpix=`${P_DFITS} -x ${ext} ${FILE} | ${P_FITSORT} CRPIX1 | ${P_GAWK} '(NR==2) {print $2}'`
    if [ "${testcrpix}"_A != "_A" ] && [ "${testcrpix}" != "KEY_N/A" ]; then
        refpixel=`${P_DFITS} -x ${ext} ${FILE} | \
	          ${P_FITSORT} CRPIX1 CRPIX2 | \
                  ${P_GAWK} '($1!="FILE") {print $2, $3}'`
    else
	rpix1=${REFPIXX[${k}]}
	rpix2=${REFPIXY[${k}]}
	if [ "${rpix1}_A" = "_A" ]; then
	   rpix1=1
	fi	   
	if [ "${rpix2}_A" = "_A" ]; then
	   rpix2=1
	fi   
        refpixel="${rpix1} ${rpix2}"
    fi

    c11=`echo ${cdmatrix} | ${P_GAWK} '{print $1}'`
    c12=`echo ${cdmatrix} | ${P_GAWK} '{print $2}'`
    c21=`echo ${cdmatrix} | ${P_GAWK} '{print $3}'`
    c22=`echo ${cdmatrix} | ${P_GAWK} '{print $4}'`
    cr1=`echo ${refpixel} | ${P_GAWK} '{print $1}'`
    cr2=`echo ${refpixel} | ${P_GAWK} '{print $2}'`
    if [ "${k}" = "1" ]; then
       cd11="${c11}"
       cd12="${c12}"
       cd21="${c21}"
       cd22="${c22}"
       cpx1="${cr1}"
       cpx2="${cr2}"
    else
       cd11="${cd11},${c11}"
       cd12="${cd12},${c12}"
       cd21="${cd21},${c21}"
       cd22="${cd22},${c22}"
       cpx1="${cpx1},${cr1}"
       cpx2="${cpx2},${cr2}"
    fi

    k=$(( $k + 1 ))
  done
}

function get_wcsext {

  local k

  k=1
  cd11=""
  cd12=""
  cd21=""
  cd22=""
  cpx1=""
  cpx2=""

  while [ "${k}" -le "${NCHIPS}" ]
  do
    ext=1

    # test if the CD matrix is present
    testcd=`${P_DFITS} -x ${ext} ${FILE} | ${P_FITSORT} CD1_1 | ${P_GAWK} '(NR==2) {print $2}'`
    testcdelt=`${P_DFITS} -x ${ext} ${FILE} | ${P_FITSORT} CDELT1 | ${P_GAWK} '(NR==2) {print $2}'`
    testcdelt2=`echo ${testcdelt} | ${P_GAWK} '{if ($1>=1) print "bad"; else print "good"}'`
    if [ "${testcd}"_A != "_A" ] && [ "${testcd}" != "KEY_N/A" ]; then
        cdmatrix=`${P_DFITS} -x ${ext} ${FILE} | \
	          ${P_FITSORT} CD1_1 CD1_2 CD2_1 CD2_2 | \
                  ${P_GAWK} '($1!="FILE") {print $2, $3, $4, $5}'`
    else
	if [ "${testcdelt}"_A != "_A" ] && [ "${testcdelt}" != "KEY_N/A" ] && [ "${testcdelt2}" = "good" ] ; then
           cdmatrix=`${P_DFITS} -x ${ext} ${FILE} | \
                  ${P_FITSORT} CDELT1 CDELT2 | \
		  ${P_GAWK} '($1!="FILE") {print $2, "0.0", "0.0", $3}'`
    	else
           cdmatrix="${PIXSCX} 0.0 0.0 ${PIXSCY}"
        fi
    fi

    # test if the reference pixel is present
    testcrpix=`${P_DFITS} -x ${ext} ${FILE} | ${P_FITSORT} CRPIX1 | ${P_GAWK} '(NR==2) {print $2}'`
    if [ "${testcrpix}"_A != "_A" ] && [ "${testcrpix}" != "KEY_N/A" ]; then
        refpixel=`${P_DFITS} -x ${ext} ${FILE} | \
	          ${P_FITSORT} CRPIX1 CRPIX2 | \
                  ${P_GAWK} '($1!="FILE") {print $2, $3}'`
    else
	rpix1=${REFPIXX[${k}]}
	rpix2=${REFPIXY[${k}]}
	if [ "${rpix1}_A" = "_A" ]; then
	   rpix1=1
	fi	   
	if [ "${rpix2}_A" = "_A" ]; then
	   rpix2=1
	fi   
        refpixel="${rpix1} ${rpix2}"
    fi

    c11=`echo ${cdmatrix} | ${P_GAWK} '{print $1}'`
    c12=`echo ${cdmatrix} | ${P_GAWK} '{print $2}'`
    c21=`echo ${cdmatrix} | ${P_GAWK} '{print $3}'`
    c22=`echo ${cdmatrix} | ${P_GAWK} '{print $4}'`
    cr1=`echo ${refpixel} | ${P_GAWK} '{print $1}'`
    cr2=`echo ${refpixel} | ${P_GAWK} '{print $2}'`
    if [ "${k}" = "1" ]; then
       cd11="${c11}"
       cd12="${c12}"
       cd21="${c21}"
       cd22="${c22}"
       cpx1="${cr1}"
       cpx2="${cr2}"
    else
       cd11="${cd11},${c11}"
       cd12="${cd12},${c12}"
       cd21="${cd21},${c21}"
       cd22="${cd22},${c22}"
       cpx1="${cpx1},${cr1}"
       cpx2="${cpx2},${cr2}"
    fi

    k=$(( $k + 1 ))
  done
}



function get_statminsection {
	 
  local xmin
  local ymin
  local xmax
  local ymax

  if  [ "${STATSXMIN[${CHIP}]}"_A != "_A" ] && \
      [ "${STATSXMAX[${CHIP}]}"_A != "_A" ] && \
      [ "${STATSYMIN[${CHIP}]}"_A != "_A" ] && \
      [ "${STATSYMAX[${CHIP}]}"_A != "_A" ]; then
      xmin=${STATSXMIN[${CHIP}]}
      xmax=${STATSXMAX[${CHIP}]}
      ymin=${STATSYMIN[${CHIP}]}
      ymax=${STATSYMAX[${CHIP}]}
  else
    kindex=1
    statminsection=""
    xmax=${SIZEX[1]}
    ymax=${SIZEY[1]}

    while [ "${kindex}" -le "${NCHIPS}" ]
    do
	if [ ${SIZEX[kindex]} -lt ${xmax} ]; then
       	    xmax=${SIZEX[kindex]}
    	fi
    	if [ ${SIZEY[kindex]} -lt ${ymax} ]; then
       	    ymax=${SIZEY[kindex]}
        fi
        kindex=$((${kindex}+1))
    done
    
    xmin=2
    ymin=2
    xmax=$((${xmax}-1))
    ymax=$((${ymax}-1))
  fi

  statminsection="${xmin},${xmax},${ymin},${ymax}"
  statminsection_imstats=`echo ${statminsection} | sed 's/,/ /g'`
}


function p_ls {
  ls -l | grep ^- | ${P_GAWK} '{print $NF}'
}

# the following extracts keywords;
# leading and trailing whitespace is removed (2nd call to gawk)
# and blanks inside the keyword value are replaced with underscores (e.g. for OBJECT keyword)
function get_key {
  ${P_DFITS} $1 | ${P_FITSORT} -d "$2" | ${P_GAWK} 'BEGIN{FS="\t"} {if ($2!~/KEY_N\/A/) print $2}' | ${P_GAWK} '{$1=$1}1' | sed 's/ /_/g'
}

function get_keyext {
  ${P_DFITS} -x 1 $1 | ${P_FITSORT} -d "$2" | ${P_GAWK} '{if ($2!="KEY_N/A") print $2}'
}

function get_region {
  # merge global and local region files if they exist
  regionfile=""
  region=""

  test -f ${TEMPDIR}/regionfile_${CHIP}.reg && rm ${TEMPDIR}/regionfile_${CHIP}.reg 

  if [ -f ${INSTDIR}/${INSTRUMENT}.reg ]; then
  	cat ${INSTDIR}/${INSTRUMENT}.reg >> \
  	    ${TEMPDIR}/regionfile_${CHIP}.reg
  	regionfile="${TEMPDIR}/regionfile_${CHIP}.reg"
	region="-d ${regionfile}"
  fi
  if [ -f ${INSTDIR}/${INSTRUMENT}_${CHIP}.reg ]; then
  	cat ${INSTDIR}/${INSTRUMENT}_${CHIP}.reg >> \
  	    ${TEMPDIR}/regionfile_${CHIP}.reg
  	regionfile="${TEMPDIR}/regionfile_${CHIP}.reg"
	region="-d ${regionfile}"
  fi
}

function get_region_chip {
  # merge global and local region files if they exist
  # for a different chip than the currently processed one 
  # (constant sky subtraction)
  regionfile=""
  region=""

  test -f ${TEMPDIR}/regionfile_$1.reg_$$ && rm ${TEMPDIR}/regionfile_$1.reg_$$

  if [ -f ${INSTDIR}/${INSTRUMENT}.reg ]; then
  	cat ${INSTDIR}/${INSTRUMENT}.reg >> \
  	    ${TEMPDIR}/regionfile_$1.reg_$$
  	regionfile="${TEMPDIR}/regionfile_$1.reg_$$"
	region="-d ${regionfile}"
  fi
  if [ -f ${INSTDIR}/${INSTRUMENT}_$1.reg ]; then
  	cat ${INSTDIR}/${INSTRUMENT}_$1.reg >> \
  	    ${TEMPDIR}/regionfile_$1.reg_$$
  	regionfile="${TEMPDIR}/regionfile_$1.reg_$$"
	region="-d ${regionfile}"
  fi
}

function prepare_sex_for_region {
  backstring=""
  weightstring=""
  if [ -f ${regionfile} ] && [ "${regionfile}_A" != "_A" ]; then
      # estimate the background, ignoring blanked pixels
      background=`${P_FITSSTAT} -i ${FILE} -m median -q`
      backstring="-BACK_TYPE MANUAL -BACK_VALUE ${background}"
      weightstring="-WEIGHT_TYPE MAP_WEIGHT -WEIGHT_IMAGE /$1/WEIGHTS/globalweight_dummy_${CHIP}.fits"

      # check if the dummy weight exists
      if [ ! -e /$1/WEIGHTS/globalweight_dummy_${CHIP}.fits ]; then
	  mkdir -p /$1/WEIGHTS/
	  ${P_IC} -p -32 -c ${SIZEX[${CHIP}]} ${SIZEY[${CHIP}]} '1' > ${TEMPDIR}/dummy_${CHIP}.fits
	  ${P_FITSPOLYGON} -i ${TEMPDIR}/dummy_${CHIP}.fits -p ${regionfile} \
	      -o /$1/WEIGHTS/globalweight_dummy_${CHIP}.fits
	  rm ${TEMPDIR}/dummy_${CHIP}.fits
      fi
  fi
}


function prepare_imred_for_backgroundmodel {
  # The relevant settings depending on the apply mode of the background model
  flatstring=""
  fringestring=""

  ####################################################
  # subtract background model
  ####################################################
  if [ "${V_BACK_APPLYMODE}" -eq 0 ]; then
      fringestring="-FLAT N -FRINGE Y -FRINGE_SCALE ${V_BACK_FRINGESCALE}"
      if [ "${V_BACK_ILLUMSMOOTH}"_A != "_A" ]; then
	  FRINGEIMAGE=/$1/$2/$2_${CHIP}_illum.fits
      else
	  FRINGEIMAGE=/$1/$2/$2_${CHIP}.fits
      fi
      fringestring="${fringestring} -FRINGE_IMAGE ${FRINGEIMAGE} -FRINGE_REFIMAGE ${FRINGEIMAGE}"
  fi

  ####################################################
  # divide background model
  ####################################################
  if [ "${V_BACK_APPLYMODE}" -eq 1 ]; then
      flatstring="-FRINGE N -FLAT Y -FLAT_THRESHHOLD 0.1 -FLAT_SCALE ${V_BACK_ADJUSTGAINS}"
      if [ "${V_BACK_ILLUMSMOOTH}"_A != "_A" ]; then
	  FLATIMAGE=/$1/$2/$2_${CHIP}_illum.fits
      else
	  FLATIMAGE=/$1/$2/$2_${CHIP}.fits
      fi
      flatstring="${flatstring} -FLAT_IMAGE ${FLATIMAGE} -FLAT_SCALEIMAGE ${FLATIMAGE}"
  fi

  ####################################################
  # subtract fringing model
  ####################################################
  if [ "${V_BACK_APPLYMODE}" -eq 2 ]; then
      fringestring="-FRINGE Y -FRINGE_SCALE ${V_BACK_FRINGESCALE}"
      if [ "${V_BACK_FRINGESMOOTH}"_A != "_A" ]; then
	  FRINGEIMAGE=/$1/$2/$2_${CHIP}_fringe_smooth.fits
      else
	  FRINGEIMAGE=/$1/$2/$2_${CHIP}_fringe.fits
      fi
      fringestring="${fringestring} -FRINGE_IMAGE ${FRINGEIMAGE} -FRINGE_REFIMAGE /$1/$2/$2_${CHIP}_illum.fits"
  fi

  ####################################################
  # divide background model, subtract fringing model
  ####################################################
  if [ "${V_BACK_APPLYMODE}" -eq 3 ]; then
      flatstring="-FLAT Y -FLAT_THRESHHOLD 0.1 -FLAT_SCALE ${V_BACK_ADJUSTGAINS}"
      if [ "${V_BACK_ILLUMSMOOTH}"_A != "_A" ]; then
	  FLATIMAGE=/$1/$2/$2_${CHIP}_illum.fits
      else
	  FLATIMAGE=/$1/$2/$2_${CHIP}.fits
      fi
      flatstring="${flatstring} -FLAT_IMAGE ${FLATIMAGE} -FLAT_SCALEIMAGE ${FLATIMAGE}"

      fringestring="-FRINGE Y -FRINGE_SCALE ${V_BACK_FRINGESCALE}"
      if [ "${V_BACK_FRINGESMOOTH}"_A != "_A" ]; then
	  FRINGEIMAGE=/$1/$2/$2_${CHIP}_fringe_smooth.fits
      else
	  FRINGEIMAGE=/$1/$2/$2_${CHIP}_fringe.fits
      fi
      fringestring="${fringestring} -FRINGE_IMAGE ${FRINGEIMAGE} -FRINGE_REFIMAGE /$1/$2/$2_${CHIP}_illum.fits"
  fi

}
