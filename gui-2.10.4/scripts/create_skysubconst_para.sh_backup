#!/bin/bash -xv

# the script creates sky subtracted images.
# It puts them in the same dir. as the science frames

# $1: main directory
# $2: science directory
# $3: extension
# $4: cut extension
# $5: new extension
# $6: from which chip
# $7: chips to be processed

SCRIPTDIR=`pwd`

INSTDIR=instruments_professional
if [ ! -f ${INSTDIR}/${INSTRUMENT}.ini ]; then
    INSTDIR=instruments_commercial
fi
if [ ! -f ${INSTDIR}/${INSTRUMENT}.ini ]; then
    INSTDIR=~/.theli/instruments_user/
fi
. ${INSTDIR}/${INSTRUMENT:?}.ini

. bash.include

area=""
if [ "${V_CSKY_RA1}" != "" ]  && [ "${V_CSKY_RA2}" != "" ] && \
   [ "${V_CSKY_DEC1}" != "" ] && [ "${V_CSKY_DEC2}" != "" ]; then
    area="from_area"
fi

section=""
if [ "${V_CSKY_XMIN}" != "" ] && [ "${V_CSKY_XMAX}" != "" ] && \
   [ "${V_CSKY_YMIN}" != "" ] && [ "${V_CSKY_YMAX}" != "" ]; then

    section="-s ${V_CSKY_XMIN} ${V_CSKY_XMAX} ${V_CSKY_YMIN} ${V_CSKY_YMAX}"
fi

# the chips to process

for CHIP in $7
do
  ls -1 /$1/$2/*_${CHIP}$3$4fits > ${TEMPDIR}/skysub_images${CHIP}_$$

  FILE=`${P_GAWK} '(NR==1) {print $0}' ${TEMPDIR}/skysub_images${CHIP}_$$`

  if [ -L ${FILE} ]; then
      LINK=`${P_READLINK} ${FILE}`
      RESULTDIR[${CHIP}]=`dirname ${LINK}`
  else
      RESULTDIR[${CHIP}]="$1/$2"
  fi  
  
  NUMTHREAD=`${SCRIPTDIR}/get_nthreads.sh ${NCHIPS} ${NPARA} ${CHIP}`

  cat ${TEMPDIR}/skysub_images${CHIP}_$$ |\
  {
  while read file
    do
      BASE=`basename ${file} $4fits`
      BASEred=`basename ${file} ${CHIP}$3$4fits`

      # get the statistics required
      # first, the method (mode - median - mean - lowquart)
      if [ "${V_CSKYMETHOD}" = "0" ]; then
	  pos="2"
      fi
      if [ "${V_CSKYMETHOD}" = "1" ]; then
	  pos="4"
      fi
      if [ "${V_CSKYMETHOD}" = "2" ]; then
	  pos="6"
      fi
      if [ "${V_CSKYMETHOD}" = "3" ]; then
	  pos="3"
      fi

      # merge global and individual region files, if they exist
      get_region
      if [ "${regionfile}"_A = "_A" ]; then
	  regionstring=""
      else
	  regionstring="-p ${regionfile}"
      fi 

      # get the corresponding sky value

      # do it for each chip
      if [ "$6" = "ALL" ] && [ "${area}" != "from_area" ]; then
          # first run sextractor to subtract objects from the image
	  ${P_SEX} ${file} -c ${DATACONF}/image-objects.sex \
	      -DETECT_THRESH ${V_SKYSUBDETECTTHRESH} \
	      -DETECT_MINAREA ${V_SKYSUBDETECTMINAREA} \
	      -CHECKIMAGE_NAME ${RESULTDIR[${CHIP}]}/${BASE}"_sub1.fits" \
	      -WEIGHT_TYPE MAP_WEIGHT \
	      -WEIGHT_IMAGE /$1/WEIGHTS/${BASE}$4weight.fits \
	      -NTHREADS ${NUMTHREAD}
      
	  ${P_FITSPOLYGON} \
	      -i ${file} \
	      -t ${RESULTDIR[${CHIP}]}/${BASE}"_sub1.fits" \
	      -o ${RESULTDIR[${CHIP}]}/${BASE}"_skysub.fits" \
	      ${regionstring} \
	      -u 0.0 \
	      -v -1.0e09

	  sky=`${P_IMSTATS} -d 6 ${section} -t -1e8 1e8 ${RESULTDIR[${CHIP}]}/${BASE}"_skysub.fits" |\
               ${P_GAWK} '($1 != "#") {print $'"${pos}"'}'`

	  rm ${RESULTDIR[${CHIP}]}/${BASE}"_skysub.fits"
	  rm ${RESULTDIR[${CHIP}]}/${BASE}"_sub1.fits"
      fi

      # get the sky from one chip (mosaic cameras only)
      if [ "$6" != "ALL" ] && \
	 [ "${V_CSKYMANUAL}" != "MANUAL" ] && [ "${area}" != "from_area" ]; then

	  # check if another process has started it already
	  if [ -f $1/$2/.${BASEred}$6$3"_sub1"$4"fits.sky" ]; then
	      sky=`cat $1/$2/.${BASEred}$6$3"_sub1"$4"fits".sky`

	      # check if that other process is still running (sky value would be empty), 
	      # and wait until it has finished
	      while [ "${sky}_A" = "_A" ]
	      do
		  sleep 1
		  sky=`cat $1/$2/.${BASEred}$6$3"_sub1"$4"fits".sky`
	      done
	  else
	      # process hasn't been started, so let's do it here

	      # first, obtain the lock
	      touch $1/$2/.${BASEred}$6$3"_sub1"$4"fits.sky"

	      # we have to get the region from a different chip (in general) than the current chip
	      get_region_chip $6
	      if [ "${regionfile}"_A = "_A" ]; then
		  regionstring=""
	      else
		  regionstring="-p ${regionfile}"
	      fi 

              # run sextractor to subtract objects from the image;
	      ${P_SEX} $1/$2/${BASEred}$6$3$4fits -c ${DATACONF}/image-objects.sex \
		  -DETECT_THRESH ${V_SKYSUBDETECTTHRESH} \
		  -DETECT_MINAREA ${V_SKYSUBDETECTMINAREA} \
		  -CHECKIMAGE_NAME ${RESULTDIR[${CHIP}]}/skysample.fits_$$ \
		  -WEIGHT_TYPE MAP_WEIGHT \
		  -WEIGHT_IMAGE /$1/WEIGHTS/${BASEred}$6$3$4weight.fits \
		  -NTHREADS ${NUMTHREAD}

	      ${P_FITSPOLYGON} \
		  -i $1/$2/${BASEred}$6$3$4fits \
		  -t ${RESULTDIR[${CHIP}]}/skysample.fits_$$ \
		  -o ${RESULTDIR[${CHIP}]}/skysample.sub.fits_$$ \
		  ${regionstring} \
		  -u 0.0 \
		  -v -1.0e09
	      
	      sky=`${P_IMSTATS} -d 6 ${section} -t -1e8 1e8 ${RESULTDIR[${CHIP}]}/skysample.sub.fits_$$ |\
                   ${P_GAWK} '($1 != "#") {print $'"${pos}"'}'`

	      echo ${sky} > $1/$2/.${BASEred}$6$3"_sub1"$4"fits.sky"

	      rm ${RESULTDIR[${CHIP}]}/skysample.fits_$$ 
	      rm ${RESULTDIR[${CHIP}]}/skysample.sub.fits_$$
	  fi
      fi

      # get the sky from an area (all cameras)
      if [ "${area}" = "from_area" ] && \
	 [ "${V_CSKYMANUAL}" != "MANUAL" ]; then

	  # identify in which chip the area is located
	  ls -1 /$1/$2/${BASEred}*$3$4"fits" > ${TEMPDIR}/sky2xy_imagelist_$$
	  ${P_SKY2XY_HELPER} -i ${TEMPDIR}/sky2xy_imagelist_$$ \
	      -c ${V_CSKY_RA1} ${V_CSKY_DEC1} ${V_CSKY_RA2} ${V_CSKY_DEC2} \
	      > ${TEMPDIR}/sky2xy_result_$$
	  
	  image=`${P_GAWK} '{print $1}' ${TEMPDIR}/sky2xy_result_$$`
	  imagebase=`basename ${image}`
	  section=`${P_GAWK} '{print $2, $3, $4, $5}' ${TEMPDIR}/sky2xy_result_$$`

	  # check if another process has started it already
	  if [ -f $1/$2/.${imagebase}".sky" ]; then
	      sky=`cat $1/$2/.${imagebase}".sky"`

	      # check if that other process is still running (sky value would be empty), 
	      # and wait until it has finished
	      while [ "${sky}_A" = "_A" ]
	      do
		  sleep 1
		  sky=`cat $1/$2/.${imagebase}".sky"`
	      done
	  else
      	      # process hasn't been started, so let's do it here

	      # first, obtain the lock
	      touch $1/$2/.${imagebase}".sky"

              # run sextractor to subtract objects from the image	      
	      ${P_SEX} ${image} -c ${DATACONF}/image-objects.sex \
		  -DETECT_THRESH ${V_SKYSUBDETECTTHRESH} \
		  -DETECT_MINAREA ${V_SKYSUBDETECTMINAREA} \
		  -CHECKIMAGE_NAME ${RESULTDIR[${CHIP}]}/skysample.fits_$$ \
		  -WEIGHT_TYPE MAP_WEIGHT \
		  -WEIGHT_IMAGE /$1/WEIGHTS/${BASE}$4weight.fits \
		  -NTHREADS ${NUMTHREAD}
	      
	      ${P_FITSPOLYGON} \
		  -i ${image} \
		  -t ${RESULTDIR[${CHIP}]}/skysample.fits_$$ \
		  -o ${RESULTDIR[${CHIP}]}/skysample.sub.fits_$$ \
		  ${regionstring} \
		  -u 0.0 \
		  -v -1.0e09
	      
	      sky=`${P_IMSTATS} -d 6 ${RESULTDIR[${CHIP}]}/skysample.sub.fits_$$ \
		  -t -1e8 1e8 -s ${section} | ${P_GAWK} '($1 != "#") {print $'"${pos}"'}'`	      

	      echo ${sky} > $1/$2/.${imagebase}".sky"

	      rm ${RESULTDIR[${CHIP}]}/skysample.fits_$$ 
	      rm ${RESULTDIR[${CHIP}]}/skysample.sub.fits_$$
	  fi
      fi

      # finally subtract the sky
      if [ "${V_CSKYMANUAL}" != "MANUAL" ]; then
	  ${P_IC} '%1 '"${sky}"' -' ${file} > ${RESULTDIR[${CHIP}]}/${BASE}"$5fits"
      fi

      # what to do if a manual sky has been defined
      if [ "${V_CSKYMANUAL}" = "MANUAL" ]; then
	  sky=`grep ${BASE} $1/$2/skybackground.use | ${P_GAWK} '{print $2}'`
	  ${P_IC} '%1 '"${sky}"' -' ${file} > ${RESULTDIR[${CHIP}]}/${BASE}"$5fits"
      fi

      # write the sky into the fits header
      skyexist=`get_key ${RESULTDIR[${CHIP}]}/${BASE}"$5fits" SKYVALUE`
      if [ "${skyexist}"_A = "_A" ]; then
	  NEXTDUMMY=`${P_DFITS} ${RESULTDIR[${CHIP}]}/${BASE}"$5fits" | grep DUMMY | \
	      ${P_GAWK} 'BEGIN {nrmin=1000+0} {
                        if (index($1,"DUMMY")==1) {
			   nr=substr($1,6)+0; if(nr<nrmin) {nrmin=nr}}} 
                        END {if(NR>0) {print nrmin}}'`
	  ${P_REPLACEKEY} ${RESULTDIR[${CHIP}]}/${BASE}"$5fits" \
	      "SKYVALUE= ${sky}" DUMMY${NEXTDUMMY}
      fi

      if [ "${RESULTDIR[${CHIP}]}" != "$1/$2" ]; then
	  ln -s ${RESULTDIR[${CHIP}]}/${BASE}"$5fits" /$1/$2/${BASE}"$5fits"
      fi
    done
  }
done
